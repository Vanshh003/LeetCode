https://leetcode.com/problems/permutations/




class Solution {
public:
    void solve(vector<int> &nums, vector<int> &ds, vector<vector<int>> &ans, vector<int> &freq) {
        if(ds.size() == nums.size()) {
            ans.push_back(ds);
            return;
        }

        for(int i=0; i<nums.size(); i++) {
            if(!freq[i]) {
                freq[i] = 1;
                ds.push_back(nums[i]);

                solve(nums, ds, ans, freq);

                freq[i] = 0;
                ds.pop_back();
            }
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        int n = nums.size();

        vector<int> ds;
        vector<vector<int>> ans;
        vector<int> freq(n, 0);

        solve(nums, ds, ans, freq);

        return ans;
    }
};





class Solution {
public:
    void solve(int ind, vector<int> &nums, vector<vector<int>> &ans) {
        if(ind == nums.size()) {
            ans.push_back(nums);
            return;
        }

        for(int i=ind; i<nums.size(); i++) {
            swap(nums[i], nums[ind]);
            solve(ind+1, nums, ans);
            swap(nums[i], nums[ind]);
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        int n = nums.size();

        vector<vector<int>> ans;
        solve(0, nums, ans);

        return ans;
    }
};
