https://leetcode.com/problems/power-of-two/description/




// TC: O(N)
// SC: O(1)
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n <= 0) return false;
        if(n == 1) return true;

        return n%2 == 0 && isPowerOfTwo(n/2);
    }
};





// TC: O(logN)
// SC: O(1)
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n == 0) return false;
        
        while(n % 2 == 0) n /= 2;
        
        return (n == 1);
    }
};





// TC: O(1)
// SC: O(1)
// if n is the power of 2 then the (&) of n and n-1 is always 0
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n <= 0) return false;

        return (n & (n-1)) == 0;
    }
};





// TC: O(logN)
// SC: O(1)
// if n is the power of 2 then it will always have only 1 set bit
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n <= 0) return false;

        return __builtin_popcount(n) == 1;
    }
};





// TC: O(N)
// SC: O(1)
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n <= 0) return false;

        return ((int)pow(2, 30) % n) == 0;
    }
};
