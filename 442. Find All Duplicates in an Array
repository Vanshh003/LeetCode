https://leetcode.com/problems/find-all-duplicates-in-an-array/description/




//                      BRUTE 
// TC: O(N*N)
// SC: O(N)

class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        if(nums.empty()) return {};
        vector<int> ans;
        
        for(int i=0; i<nums.size(); i++) {
            for(int j=i+1; j<nums.size(); j++) {
                if(nums[i] == nums[j]) {
                    ans.push_back(nums[i]);
                    break;
                }
            }
        }

        return ans;
    }
};





//                      BETTER
// TC: O(N*log(N))
// SC: O(N)

class Solution {
public:
    vector<int> findDuplicates(vector<int>& v) {
        map<int, int> m;
        for(auto i:v) m[i]++;
        
        vector<int> ans;
        for(auto i:m) {
            if(i.second == 2) ans.push_back(i.first);
        }

        return ans;
    }
};





//                      BETTER
// TC: O(N*log(N))
// SC: O(N)

class Solution {
public:
    vector<int> findDuplicates(vector<int>& v) {
        sort(v.begin(), v.end());
        int n = v.size();
        vector<int> ans;

        for(int i=0; i<n-1; i++) {
            if(v[i] == v[i+1]) {
                ans.push_back(v[i]);
                i++;
            }
        }

        return ans;
    }
};





//                      OPTIMAL
// TC: O(N)
// SC: O(N)

class Solution {
public:
    vector<int> findDuplicates(vector<int>& v) {
        int n = v.size();
        vector<int> ans;
      
        for(int i=0; i<n; i++) {
            if(v[abs(v[i])-1] < 0) {
                ans.push_back(abs(v[i]));
                continue;
            }

            v[abs(v[i]) - 1] *= -1;
        }

        return ans;
    }
};
