https://leetcode.com/problems/student-attendance-record-ii/description/




                        // RECURSION
// TC: O(3^n)

class Solution {
public:
    int solve(int n, int consecutiveLate, int absent) {
        if(absent > 1 || consecutiveLate > 2) return 0;
        if(n == 0) return 1;

        int p = solve(n-1, 0, absent);
        int a = solve(n-1, 0, absent+1);
        int l = solve(n-1, consecutiveLate+1, absent);

        return p + a + l;
    }

    int checkRecord(int n) {
        return solve(n, 0, 0);    
    }
};









                        // MEMOISATION
// TC: O(n)
// SC: O(n)

class Solution {
public:
    int M = 1e9+7;
    int solve(int n, int consecutiveLate, int absent, vector<vector<vector<int>>> &dp) {
        if(absent > 1 || consecutiveLate > 2) return 0;
        if(n == 0) return 1;

        if(dp[n][consecutiveLate][absent] != -1) return dp[n][consecutiveLate][absent];

        int p = solve(n-1, 0, absent, dp) % M;
        int a = solve(n-1, 0, absent+1, dp) % M;
        int l = solve(n-1, consecutiveLate+1, absent, dp) % M;

        return dp[n][consecutiveLate][absent] = (((p + a) % M) + l) % M;
    }

    int checkRecord(int n) {
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(3, vector<int>(2, -1)));
        return solve(n, 0, 0, dp);    
    }
};









                        // TABULATON
// TC: O(n)
// SC: O(n)

class Solution {
public:
    int M = 1e9+7;

    int checkRecord(int n) {
       	ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, 0)));

        // base case, n == 0 (days == 0)
        // dp[n][A][L] == ???
        for(int A = 0; A <= 1; A++) {
            for(int L = 0; L <= 2; L++) {
                dp[0][A][L] = 1;
            }
        }

        for(int i = 1; i <= n; i++) {
            for(int A = 0; A <= 1; A++) {
                for(int L = 0; L <= 2; L++) {
                    long ans = 0;

                    // present
                    ans += dp[i-1][A][0];

                    // late
                    if(L + 1 <= 2) ans += dp[i-1][A][L+1];

                    // absent
                    if(A + 1 <= 1) ans += dp[i-1][A+1][0];

                    // update the dp array
                    dp[i][A][L] = ans % M; 
                }
            }
        }

        return dp[n][0][0];
    }
};
