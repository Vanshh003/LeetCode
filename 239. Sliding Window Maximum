https://leetcode.com/problems/sliding-window-maximum/




class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {

        //             //NAIVE APPROACH
        //             //TC: O(n*k)

        // vector<int> ans;
        // int start = 0; 
        // int end = start + k - 1;

        // while(end != nums.size()) {
        //     int maxi = nums[start];
        //     for(int i=start; i<=end; i++) {
        //         maxi = max(maxi, nums[i]);
        //     }
        
        //     ans.push_back(maxi);
        //     start++;
        //     end++;
        // }

        // return ans;


        // vector<int> ans;
        // for(int i=0; i <= nums.size()-k; i++) {
        //     int maxi = nums[i];

        //     for(int j=i; j <= i+k-1; j++) {
        //         maxi = max(maxi, nums[j]);
        //     }

        //     ans.push_back(maxi);
        // }

        // return ans;


                    //OPTIMAL SOLUTION
                    //TC: O(n)+O(n) ~ O(n)
                    //SC: O(k)
        deque<int> dq;
        vector<int> ans;

        for(int i=0; i<nums.size(); i++) {
            if(!dq.empty() && dq.front()==i-k) dq.pop_front();

            while(!dq.empty() && nums[dq.back()] < nums[i]) dq.pop_back();

            dq.push_back(i);
            if(i >= k-1) ans.push_back(nums[dq.front()]);
        } 

        return ans;
    }
};
