https://leetcode.com/problems/4sum/




// find all the 4 elements using 4 loops and then check.. maintain set for uniqueness         O(n^4)

// reduce the last loop.. a[i] + a[j] + a[k] + a[l] = k -> a[l] = k - (a[i] + a[j] + a[k]) similar to 3sum          O(n^3)*O(logm) (m: no of ele in set)

// sort to maintain uniqueness and then by keeping i and j constant use 2pointers same as in 3sum            O(n^2)*O(n) ~ O(n^3)

class Solution {
public:
    vector<vector<int>> fourSum(vector<int> &arr, int target) {
        int n = arr.size();
        vector<vector<int>> ans;

        sort(arr.begin(), arr.end());

        for(int i=0; i<n; i++) {
            if(i>0 && arr[i] == arr[i-1]) continue;

            for(int j=i+1; j<n; j++) {
                if(j > i+1 && arr[j] == arr[j-1]) continue;
                
                int k = j+1;
                int l = n-1;

                while(k < l) {
                    long long sum = arr[i] + arr[j];
                    sum += arr[k] + arr[l];

                    if(sum > target) l--;
                    else if(sum < target) k++;
                    else {
                        ans.push_back({arr[i], arr[j], arr[k], arr[l]});
                        k++;
                        l--;

                        while(k < l && arr[k] == arr[k-1]) k++;
                        while(k < l && arr[l] == arr[l+1]) l--;
                    }
                }
            }
        }

        return ans;
    }
};
