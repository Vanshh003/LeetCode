https://leetcode.com/problems/freedom-trail/description/




//                      RECURSION
class Solution {
public:
    int solve(string &ring, string &key, int ptr, int index) {
        int n = ring.size();
        int m = key.size();

        if(index >= m) return 0;

        int steps = 1e9;
        for(int i=0; i<n; i++) {
            if(ring[i] == key[index]) {
                steps = min(steps, min(abs(i-ptr), n-abs(i-ptr)) + 1 + solve(ring, key, i, index+1));
            }
        }

        return steps;
    }

    int findRotateSteps(string& ring, string& key) {
        int ptr = 0;
        int index = 0;

        int n = ring.size();
        int m = key.size();

        return solve(ring, key, ptr, index);
    }
};





//                      MEMOIZATION
class Solution {
public:
    int solve(string &ring, string &key, int ptr, int index, vector<vector<int>> &dp) {
        int n = ring.size();
        int m = key.size();

        if(index >= m) return 0;
        if(dp[ptr][index] != -1) return dp[ptr][index];

        int steps = 1e9;
        for(int i=0; i<n; i++) {
            if(ring[i] == key[index]) {
                steps = min(steps, min(abs(i-ptr), n-abs(i-ptr)) + 1 + solve(ring, key, i, index+1, dp));
            }
        }

        return dp[ptr][index] = steps;
    }

    int findRotateSteps(string& ring, string& key) {
        int ptr = 0;
        int index = 0;

        int n = ring.size();
        int m = key.size();

        vector<vector<int>> dp(n, vector<int>(m, -1));

        return solve(ring, key, ptr, index, dp);
    }
};
