https://leetcode.com/problems/sudoku-solver/description/




class Solution {
public:
    bool check(int row, int col, vector<vector<char>>& board, int value) {
        int n = board.size();

        for(int i=0; i<n; i++) {
            if(board[row][i] == value) return false;
            if(board[i][col] == value) return false;
            
            int r = (row/3) * 3;
            int c = (col/3) * 3;
            for(int j=r; j < r+3; j++) {
                for(int k=c; k < c+3; k++) {
                    if(board[j][k] == value) return false;
                }
            }

            // if(board[3*(row/3) + (i/3)][3 * (col/3) + (i%3)] == value) return false;
        }

        return true;
    }

    bool solve(vector<vector<char>>& board){
        int n = board.size();

        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(board[i][j] == '.') {
                    for(char value = '1'; value <= '9'; value++) {
                        if(check(i, j, board, value)) {
                            board[i][j] = value;
                            
                            bool next = solve(board);
                            
                            if(next == true) return true;
                            else board[i][j] = '.';
                        }
                    }

                    return false;
                }
            }
        }

        return true;
    }

    void solveSudoku(vector<vector<char>> &board) {
        solve(board);
    }
};
