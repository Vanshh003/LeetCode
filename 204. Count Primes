https://leetcode.com/problems/count-primes/description/




//                  BRUTE
// TC: O(n^2)

class Solution {
public:
    bool isPrime(int n) {
        for(int i=2; i<n; i++) if(n % i == 0) return false;
        return true;
    }

    int countPrimes(int n) {
        int count = 0;
        for(int i=2; i<n; i++) if(isPrime(i)) count++;
        
        return count;
    }
};





//                  BETTER
// TC: O(n * sqrt(n))

class Solution {
public:
    bool isPrime(int n) {
        for(int i=2; i*i <= n; i++) if(n % i == 0) return false;
        return true;
    }

    int countPrimes(int n) {
        int count = 0;
        for(int i=2; i<n; i++) if(isPrime(i)) count++;
        
        return count;
    }
};





//                  OPTIMAL - SIEVE OF ERATHOSTHENES
// TC: O(n * log(log(n)))

class Solution {
public:
    int countPrimes(int n) {
        int count = 0;
        vector<bool> arr(n+1, false);
        
        for(int i=2; i*i <= n; i++) {
            if(arr[i] == false) for(int j = i*2; j<=n; j += i) arr[j] = true;
        }

        for(int i=2; i<n; i++) if(arr[i] == false) count++;

        return count;
    }
};
