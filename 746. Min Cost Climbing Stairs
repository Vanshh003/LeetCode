https://leetcode.com/problems/min-cost-climbing-stairs/description/




//             RECURSION

class Solution {
public:
    int solve(int i, vector<int> &cost) {
        if(i < 0) return 0;
        if(i == 0 || i == 1) return cost[i];

        int one = cost[i] + solve(i-1, cost);
        int two = cost[i] + solve(i-2, cost);

        // return cost[i] + min(solve(i-1, cost), solve(i-2, cost));
        return min(one, two);
    }

    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        return min(solve(n-1, cost), solve(n-2, cost));
    }
};





//                  MEMOIZATION

class Solution {
public:
    int solve(int i, vector<int> &cost, vector<int> &dp) {
        if(i < 0) return 0;
        if(i == 0 || i == 1) return cost[i];
        if(dp[i] != -1) return dp[i];

        int one = cost[i] + solve(i-1, cost, dp);
        int two = cost[i] + solve(i-2, cost, dp);

        // return dp[i] = cost[i] + min(solve(i-1, cost), solve(i-2, cost));
        return dp[i] = min(one, two);
    }

    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int> dp(n+1, -1);
        return min(solve(n-1, cost, dp), solve(n-2, cost, dp));
    }
};





//                  TABULATION

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int> dp(n+1, 0);

        dp[0] = cost[0];
        dp[1] = cost[1];

        for(int i=2; i<=n; i++) {
            int one = 0;
            int two = 0;
            if(i != n) {
                one = cost[i] + dp[i-1];
                two = cost[i] + dp[i-2];
                
                dp[i] = min(one, two);
            }

            else {
                one = dp[i-1];
                two = dp[i-2];

                dp[i] = min(one, two);
            }
        }

        return dp[n];
    }
};





//                  SPACE OPTIMISATION

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        
        int prev1 = 0;
        int prev2 = 0; 
        int curr = cost[0];

        prev2 = cost[0];
        prev1 = cost[1];

        for(int i=2; i<=n; i++) {
            int one = 0;
            int two = 0;
            if(i != n) {
                one = cost[i] + prev1;
                two = cost[i] + prev2;
                
                curr = min(one, two);
            }

            else {
                one = prev1;
                two = prev2;

                curr = min(one, two);
            }

            prev2 = prev1;
            prev1 = curr;
        }

        return prev1;
    }
};
