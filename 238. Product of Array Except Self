https://leetcode.com/problems/product-of-array-except-self/description/




// TC: O(N^2)
// SC: O(N)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans;

        for(int i=0; i<n; i++) {
            int prod = 1;
            for(int j=0; j<n; j++) {
                if(i == j) continue;
                prod *= nums[j];
            }

            ans.push_back(prod);
        }

        return ans;
    }
};





// TC: O(N)
// SC: O(1)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int prod = 1;
        int zeroProd = 1;
        int zeroCnt = 0;
        int n = nums.size();
        
        for(int i=0; i<n; i++) {
            prod *= nums[i];
            
            if(nums[i] != 0) zeroProd *= nums[i];
            if(nums[i] == 0) zeroCnt++;
        }
        
        for(int i=0; i<n; i++) {
            if(nums[i] == 0 && zeroCnt == 1) nums[i] = zeroProd;
            else if(zeroCnt > 1) nums[i] = 0;
            else nums[i] = prod/nums[i];
        }

        return nums;
    }
};





// TC: O(N)
// SC: O(N)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();

        vector<int> prefix(n, 1);
        for(int i=1; i<n; i++) prefix[i] = nums[i-1] * prefix[i-1];
        
        vector<int> suffix(n, 1);
        for(int i=n-2; i>=0; i--) suffix[i] = nums[i+1] * suffix[i+1];

        vector<int> ans(n);
        for(int i=0; i<n; i++) ans[i] = prefix[i] * suffix[i];
        
        return ans;
    }
};





// TC: O(N)
// SC: O(N)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n, 1);

        for(int i=1; i<n; i++) ans[i] = ans[i-1] * nums[i-1]; 
        
        int right = 1;
        for(int i=n-1; i >= 0; i--) {
            ans[i] *= right;
            right *= nums[i];
        }

        return ans;
    }
};
