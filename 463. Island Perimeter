https://leetcode.com/problems/island-perimeter/description/




class Solution {
public:
    int solve(int i, int j, vector<vector<int>> &grid, vector<vector<int>> &visited) {
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] == 0) return 1;
        if(visited[i][j] != 0) return 0;
        
        visited[i][j] = 1;

        int up = solve(i-1, j, grid, visited);
        int down = solve(i+1, j, grid, visited);
        int left = solve(i, j-1, grid, visited);
        int right = solve(i, j+1, grid, visited);

        return up + down + left + right;
    }

    int islandPerimeter(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        vector<vector<int>> visited(n, vector<int>(m, 0));

        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(grid[i][j] == 1) return solve(i, j, grid, visited);
            }
        } 

        return -1;
    }
};
